// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: rpc_match.proto

package __

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchClient is the client API for Match service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchClient interface {
	Join(ctx context.Context, in *C2SJoin, opts ...grpc.CallOption) (*S2CJoin, error)
	Quit(ctx context.Context, in *C2SQuit, opts ...grpc.CallOption) (*S2CQuit, error)
	ForceQuit(ctx context.Context, in *C2SForceQuit, opts ...grpc.CallOption) (*S2CForceQuit, error)
}

type matchClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchClient(cc grpc.ClientConnInterface) MatchClient {
	return &matchClient{cc}
}

func (c *matchClient) Join(ctx context.Context, in *C2SJoin, opts ...grpc.CallOption) (*S2CJoin, error) {
	out := new(S2CJoin)
	err := c.cc.Invoke(ctx, "/rpc_match.Match/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchClient) Quit(ctx context.Context, in *C2SQuit, opts ...grpc.CallOption) (*S2CQuit, error) {
	out := new(S2CQuit)
	err := c.cc.Invoke(ctx, "/rpc_match.Match/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchClient) ForceQuit(ctx context.Context, in *C2SForceQuit, opts ...grpc.CallOption) (*S2CForceQuit, error) {
	out := new(S2CForceQuit)
	err := c.cc.Invoke(ctx, "/rpc_match.Match/ForceQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServer is the server API for Match service.
// All implementations must embed UnimplementedMatchServer
// for forward compatibility
type MatchServer interface {
	Join(context.Context, *C2SJoin) (*S2CJoin, error)
	Quit(context.Context, *C2SQuit) (*S2CQuit, error)
	ForceQuit(context.Context, *C2SForceQuit) (*S2CForceQuit, error)
	mustEmbedUnimplementedMatchServer()
}

// UnimplementedMatchServer must be embedded to have forward compatible implementations.
type UnimplementedMatchServer struct {
}

func (UnimplementedMatchServer) Join(context.Context, *C2SJoin) (*S2CJoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMatchServer) Quit(context.Context, *C2SQuit) (*S2CQuit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedMatchServer) ForceQuit(context.Context, *C2SForceQuit) (*S2CForceQuit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceQuit not implemented")
}
func (UnimplementedMatchServer) mustEmbedUnimplementedMatchServer() {}

// UnsafeMatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServer will
// result in compilation errors.
type UnsafeMatchServer interface {
	mustEmbedUnimplementedMatchServer()
}

func RegisterMatchServer(s grpc.ServiceRegistrar, srv MatchServer) {
	s.RegisterService(&Match_ServiceDesc, srv)
}

func _Match_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_match.Match/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).Join(ctx, req.(*C2SJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Match_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SQuit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_match.Match/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).Quit(ctx, req.(*C2SQuit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Match_ForceQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SForceQuit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServer).ForceQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_match.Match/ForceQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServer).ForceQuit(ctx, req.(*C2SForceQuit))
	}
	return interceptor(ctx, in, info, handler)
}

// Match_ServiceDesc is the grpc.ServiceDesc for Match service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Match_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_match.Match",
	HandlerType: (*MatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Match_Join_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _Match_Quit_Handler,
		},
		{
			MethodName: "ForceQuit",
			Handler:    _Match_ForceQuit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_match.proto",
}

// SandboxServiceClient is the client API for SandboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxServiceClient interface {
	LaunchByMatch(ctx context.Context, in *C2SLaunchByMatch, opts ...grpc.CallOption) (*S2CLaunchByMatch, error)
}

type sandboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxServiceClient(cc grpc.ClientConnInterface) SandboxServiceClient {
	return &sandboxServiceClient{cc}
}

func (c *sandboxServiceClient) LaunchByMatch(ctx context.Context, in *C2SLaunchByMatch, opts ...grpc.CallOption) (*S2CLaunchByMatch, error) {
	out := new(S2CLaunchByMatch)
	err := c.cc.Invoke(ctx, "/rpc_match.SandboxService/LaunchByMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServiceServer is the server API for SandboxService service.
// All implementations must embed UnimplementedSandboxServiceServer
// for forward compatibility
type SandboxServiceServer interface {
	LaunchByMatch(context.Context, *C2SLaunchByMatch) (*S2CLaunchByMatch, error)
	mustEmbedUnimplementedSandboxServiceServer()
}

// UnimplementedSandboxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSandboxServiceServer struct {
}

func (UnimplementedSandboxServiceServer) LaunchByMatch(context.Context, *C2SLaunchByMatch) (*S2CLaunchByMatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchByMatch not implemented")
}
func (UnimplementedSandboxServiceServer) mustEmbedUnimplementedSandboxServiceServer() {}

// UnsafeSandboxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServiceServer will
// result in compilation errors.
type UnsafeSandboxServiceServer interface {
	mustEmbedUnimplementedSandboxServiceServer()
}

func RegisterSandboxServiceServer(s grpc.ServiceRegistrar, srv SandboxServiceServer) {
	s.RegisterService(&SandboxService_ServiceDesc, srv)
}

func _SandboxService_LaunchByMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2SLaunchByMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServiceServer).LaunchByMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_match.SandboxService/LaunchByMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServiceServer).LaunchByMatch(ctx, req.(*C2SLaunchByMatch))
	}
	return interceptor(ctx, in, info, handler)
}

// SandboxService_ServiceDesc is the grpc.ServiceDesc for SandboxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SandboxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_match.SandboxService",
	HandlerType: (*SandboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchByMatch",
			Handler:    _SandboxService_LaunchByMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_match.proto",
}
